install.packages(c("broom", "DBI", "dbplyr", "e1071", "future", "generics", "globals", "hardhat", "igraph", "ipred", "nlme", "openssl", "parallelly", "processx", "progressr", "proxy", "ps", "recipes", "rlang", "tinytex"))
library(installr)
check.for.updates.R()
updateR()
library(installr)
updateR
updater
install.packages(c("tidyverse", "ggplot2", "gganimate", "dplyr", "plyr", "readr", "broom", "modelr", "socviz", "ggforce", "colorBlindness", "nord", "beeswarm", "data.table", "shiny", "plotly", "knitr", "mlr3", "haven.", "stringr", "lubridate", "googleVis", "markdown", "ggmap", "devtools", "testthat", "roxygen2", "e1071", "xml", "DataExplorer", "esquisse"))
setwd("~/")
install.packages(c("brew", "broom", "bslib", "callr", "cli", "commonmark", "cpp11", "crayon", "curl", "data.table", "datamods", "desc", "devtools", "digest", "dplyr", "dtplyr", "esquisse", "evaluate", "farver", "fontawesome", "forcats", "future", "future.apply", "gargle", "gert", "gganimate", "ggforce", "gh", "gitcreds", "globals", "googlesheets4", "gtable", "haven", "hms", "htmltools", "httpuv", "httr", "igraph", "isoband", "jsonlite", "knitr", "lgr", "lifecycle", "markdown", "mlr3", "mlr3measures", "mlr3misc", "modelr", "openssl", "palmerpenguins", "paradox", "parallelly", "pillar", "polyclip", "processx", "purrr", "Rcpp", "readr", "readxl", "reprex", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "rvest", "sass", "scales", "shiny", "shinyWidgets", "stringi", "stringr", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tweenr", "unikn", "vctrs", "viridisLite", "vroom", "writexl", "xfun", "yaml", "zip"))
install.packages(c("ggthemes", "ggpubr"))
setwd("~/GitHub/naburn-wholedata-2021-msc")
library(dplyr)
library(tidyverse)
library(readr)
library(readxl)
library(gganimate)
# import data
resistomap_all_data <- read_excel("Raw Data/resistomap-all-data.xlsx")
mass_spec_peak_areas <- read_excel("Raw Data/mass-spec-peak-areas.xlsx")
mass_spec_info <- read_excel("Raw Data/mass-spec-info.xlsx")
mass_spec_cvs <- read_excel("Raw Data/mass-spec-cvs.xlsx")
mass_spec_average_peak_areas <- read_excel("Raw Data/mass-spec-average-peak-areas.xlsx")
TetracyclineMS <- read_excel("Raw Data/Tetracycline.xlsx")
# Join info and peak area tables.
mass_spec_joined <- full_join(mass_spec_peak_areas, mass_spec_info,
by = c("Name" = "Name"))
# transpose mass spec table to make long (include treatment stage column)
mass_spec_long <- TetracyclineMS %>%
pivot_longer(
cols = `Dried Biosolid`:`Control`, names_to = "Treatment_Stage", values_to = "Peak_Area")
# remove columns not needed right now
mass_spec_long$Formula = NULL
mass_spec_long$`Calc. MW` = NULL
mass_spec_long$`RT [min]` = NULL
mass_spec_long$`Area (Max.)` = NULL
resistomap_long <- resistomap_all_data
# rename treatment stages to match mass spec data
resistomap_rearranged <- mutate(resistomap_long, Treatment_Stage = case_when(
str_detect(Treatment_Stage, "A") ~ "AD Feed Pump",
str_detect(Treatment_Stage, "B") ~ "AD Tank 2",
str_detect(Treatment_Stage, "C") ~ "AD Tank 4",
str_detect(Treatment_Stage, "D") ~ "AD Output",
str_detect(Treatment_Stage, "E") ~ "Fresh Biosolid",
str_detect(Treatment_Stage, "F") ~ "Dried Biosolid",
str_detect(Treatment_Stage, "G") ~ "FST Water"))
# Join both.
Naburn_Whole_Data <- full_join(mass_spec_long, resistomap_rearranged,
by = c("Treatment_Stage" = "Treatment_Stage"))
# drop NAs
Naburn_Whole_Data_NoNA <- Naburn_Whole_Data %>% drop_na()
# basic plot
ggplot(Naburn_Whole_Data_NoNA, aes(Gene_Prevalence, Peak_Area,
shape = Treatment_Stage, colour = Target_Antibiotic)) +
geom_point(size = 3) +
coord_cartesian(xlim = c(0, 1000000)) +
theme_light()
Split <- split(Naburn_Whole_Data_NoNA, Naburn_Whole_Data_NoNA$Target_Antibiotic)
Tetracycline <- Split$Tetracycline
my.animation <- ggplot(Tetracycline, aes(Gene_Prevalence, Peak_Area,
shape = Treatment_Stage, colour = Gene)) +
geom_point(size = 5) +
coord_cartesian(ylim = c(0, 150000000)) +
theme_light(base_size = 30) +
transition_states(Gene, transition_length = 2,
state_length = 3) +
enter_fade() +
exit_fade() +
ease_aes('sine-in-out')
animate(my.animation, height = 800, width = 1000)
anim_save("tetracycline.gif")
# coord_cartesian is to zoom without losing any data, since it was quite bunched towards the y axis.
# import data
resistomap_all_data <- read_excel("Raw Data/resistomap-all-data.xlsx")
setwd("~/Desktop/naburn-wholedata-2021-msc/naburn-wholedata-2021-msc")
library(dplyr)
library(tidyverse)
library(readr)
library(readxl)
library(gganimate)
library(gifski)
install.packages("gifski")
library(gifski)
# import data
resistomap_all_data <- read_excel("Raw Data/resistomap-all-data.xlsx")
mass_spec_peak_areas <- read_excel("Raw Data/mass-spec-peak-areas.xlsx")
mass_spec_info <- read_excel("Raw Data/mass-spec-info.xlsx")
mass_spec_cvs <- read_excel("Raw Data/mass-spec-cvs.xlsx")
mass_spec_average_peak_areas <- read_excel("Raw Data/mass-spec-average-peak-areas.xlsx")
TetracyclineMS <- read_excel("Raw Data/Tetracycline.xlsx")
# Join info and peak area tables.
mass_spec_joined <- full_join(mass_spec_peak_areas, mass_spec_info,
by = c("Name" = "Name"))
# transpose mass spec table to make long (include treatment stage column)
mass_spec_long <- TetracyclineMS %>%
pivot_longer(
cols = `Dried Biosolid`:`Control`, names_to = "Treatment_Stage", values_to = "Peak_Area")
# remove columns not needed right now
mass_spec_long$Formula = NULL
mass_spec_long$`Calc. MW` = NULL
mass_spec_long$`RT [min]` = NULL
mass_spec_long$`Area (Max.)` = NULL
resistomap_long <- resistomap_all_data
# rename treatment stages to match mass spec data
resistomap_rearranged <- mutate(resistomap_long, Treatment_Stage = case_when(
str_detect(Treatment_Stage, "A") ~ "AD Feed Pump",
str_detect(Treatment_Stage, "B") ~ "AD Tank 2",
str_detect(Treatment_Stage, "C") ~ "AD Tank 4",
str_detect(Treatment_Stage, "D") ~ "AD Output",
str_detect(Treatment_Stage, "E") ~ "Fresh Biosolid",
str_detect(Treatment_Stage, "F") ~ "Dried Biosolid",
str_detect(Treatment_Stage, "G") ~ "FST Water"))
# Join both.
Naburn_Whole_Data <- full_join(mass_spec_long, resistomap_rearranged,
by = c("Treatment_Stage" = "Treatment_Stage"))
# drop NAs
Naburn_Whole_Data_NoNA <- Naburn_Whole_Data %>% drop_na()
# basic plot
ggplot(Naburn_Whole_Data_NoNA, aes(Gene_Prevalence, Peak_Area,
shape = Treatment_Stage, colour = Target_Antibiotic)) +
geom_point(size = 3) +
coord_cartesian(xlim = c(0, 1000000)) +
theme_light()
Split <- split(Naburn_Whole_Data_NoNA, Naburn_Whole_Data_NoNA$Target_Antibiotic)
Tetracycline <- Split$Tetracycline
my.animation <- ggplot(Tetracycline, aes(Gene_Prevalence, Peak_Area,
shape = Treatment_Stage, colour = Gene)) +
geom_point(size = 5) +
coord_cartesian(ylim = c(0, 150000000)) +
theme_light(base_size = 30) +
transition_states(Gene, transition_length = 2,
state_length = 3) +
enter_fade() +
exit_fade() +
ease_aes('sine-in-out')
animate(my.animation, height = 800, width = 1000)
anim_save("tetracycline.gif")
anim_save(my.animation, "tetracycline.gif")
ggplot(Tetracycline, aes(Gene_Prevalence, Peak_Area,
shape = Treatment_Stage, colour = Gene)) +
geom_point(size = 5) +
coord_cartesian(ylim = c(0, 150000000)) +
theme_light(base_size = 30) +
transition_states(Gene, transition_length = 2,
state_length = 3) +
enter_fade() +
exit_fade() +
ease_aes('sine-in-out')
ggplot(Tetracycline, aes(Gene_Prevalence, Peak_Area,
shape = Treatment_Stage, colour = Gene)) +
geom_point(size = 5) +
coord_cartesian(ylim = c(0, 150000000)) +
theme_light(base_size = 30)
Split <- split(Naburn_Whole_Data_NoNA, Naburn_Whole_Data_NoNA$Target_Antibiotic)
Tetracycline <- Split$Tetracycline
ggplot(Tetracycline, aes(Gene_Prevalence, Peak_Area,
shape = Treatment_Stage, colour = Gene)) +
geom_point(size = 5) +
coord_cartesian(ylim = c(0, 150000000)) +
theme_light(base_size = 26)
ggplot(Tetracycline, aes(Gene_Prevalence, Peak_Area,
shape = Treatment_Stage, colour = Gene)) +
geom_point(size = 5) +
coord_cartesian(ylim = c(0, 150000000)) +
theme_light(base_size = 20) +
labs(title = "Tetracycline Comparison",
x = "Gene Prevalence",
y = "Peak Area",
colour = "Resistance Gene",
shape = "Wastewater Treatment Stage")
ggplot(Tetracycline, aes(Gene_Prevalence, Peak_Area,
shape = Treatment_Stage, colour = Gene)) +
geom_point(size = 3) +
coord_cartesian(ylim = c(0, 150000000)) +
theme_light() +
labs(title = "Tetracycline Comparison",
x = "Gene Prevalence",
y = "Peak Area",
colour = "Resistance Gene",
shape = "Wastewater Treatment Stage")
